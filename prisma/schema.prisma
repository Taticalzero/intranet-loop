generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id              Int       @id @default(autoincrement())
  nome            String
  senha           String
  email           String    @unique
  emailVerificado DateTime?
  creditos        Decimal   @db.Decimal(10, 2)
  cargo           String
  imagem          String?
  compras         Compra[]
  contas          Conta[]
  sessoes         Sessao[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
}

model Conta {
  usuarioId       Int
  tipo            String
  provedor        String
  contaProvedorId String
  refresh_token   String?
  access_token    String?
  expires_at      Int?
  token_type      String?
  scope           String?
  id_token        String?
  session_state   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@id([provedor, contaProvedorId])
}

model Sessao {
  sessionToken String   @unique
  usuarioId    Int
  expires      DateTime
  user         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Compra {
  id        Int             @id @default(autoincrement())
  data      DateTime        @default(now())
  usuarioId Int
  usuario   Usuario         @relation(fields: [usuarioId], references: [id])
  itens     UsuarioCompra[]
}

model Produto {
  id         Int             @id @default(autoincrement())
  nome       String
  preco      Decimal         @db.Decimal(10, 2)
  imagem     String
  estoque    Int
  itens      UsuarioCompra[]
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  deleted_at DateTime?
}

model UsuarioCompra {
  id         Int      @id @default(autoincrement())
  compraId   Int
  produtoId  Int
  quantidade Int
  preco      Decimal  @db.Decimal(10, 2)
  compra     Compra   @relation(fields: [compraId], references: [id])
  produto    Produto  @relation(fields: [produtoId], references: [id])
  created_at DateTime @default(now())
}

model Formulario {
  id         Int       @id @default(autoincrement())
  titulo     String
  questions  Questao[]
  dataLimite DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Questao {
  id           Int        @id @default(autoincrement())
  formularioId Int
  formulario   Formulario @relation(fields: [formularioId], references: [id])
  tipo         String
  titulo       String
  opcoes       Opcao[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  respostas    Resposta[]
}

model Opcao {
  id        Int      @id @default(autoincrement())
  questaoId Int
  questao   Questao  @relation(fields: [questaoId], references: [id])
  valor     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resposta {
  id         Int      @id @default(autoincrement())
  questaoId  Int
  questao    Questao   @relation(fields: [questaoId], references: [id])
  resposta   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}